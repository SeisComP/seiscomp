# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _config
else:
    import _config

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _config.delete_SwigPyIterator

    def value(self):
        return _config.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _config.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _config.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _config.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _config.SwigPyIterator_equal(self, x)

    def copy(self):
        return _config.SwigPyIterator_copy(self)

    def next(self):
        return _config.SwigPyIterator_next(self)

    def __next__(self):
        return _config.SwigPyIterator___next__(self)

    def previous(self):
        return _config.SwigPyIterator_previous(self)

    def advance(self, n):
        return _config.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _config.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _config.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _config.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _config.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _config.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _config.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _config:
_config.SwigPyIterator_swigregister(SwigPyIterator)
ERROR = _config.ERROR
WARNING = _config.WARNING
INFO = _config.INFO
DEBUG = _config.DEBUG
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _config.delete_Logger

    def log(self, arg0, filename, line, msg):
        return _config.Logger_log(self, arg0, filename, line, msg)

    def __init__(self):
        if self.__class__ == Logger:
            _self = None
        else:
            _self = self
        _config.Logger_swiginit(self, _config.new_Logger(_self, ))
    def __disown__(self):
        self.this.disown()
        _config.disown_Logger(self)
        return weakref.proxy(self)

# Register Logger in _config:
_config.Logger_swigregister(Logger)
class Exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _config.Exception_swiginit(self, _config.new_Exception(*args))
    __swig_destroy__ = _config.delete_Exception

    def what(self):
        return _config.Exception_what(self)

# Register Exception in _config:
_config.Exception_swigregister(Exception)
class OptionNotFoundException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _config.OptionNotFoundException_swiginit(self, _config.new_OptionNotFoundException(*args))
    __swig_destroy__ = _config.delete_OptionNotFoundException

# Register OptionNotFoundException in _config:
_config.OptionNotFoundException_swigregister(OptionNotFoundException)
class TypeConversionException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _config.TypeConversionException_swiginit(self, _config.new_TypeConversionException(*args))
    __swig_destroy__ = _config.delete_TypeConversionException

# Register TypeConversionException in _config:
_config.TypeConversionException_swigregister(TypeConversionException)
class SyntaxException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _config.SyntaxException_swiginit(self, _config.new_SyntaxException(*args))
    __swig_destroy__ = _config.delete_SyntaxException

# Register SyntaxException in _config:
_config.SyntaxException_swigregister(SyntaxException)
class CaseSensitivityException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _config.CaseSensitivityException_swiginit(self, _config.new_CaseSensitivityException(*args))
    __swig_destroy__ = _config.delete_CaseSensitivityException

# Register CaseSensitivityException in _config:
_config.CaseSensitivityException_swigregister(CaseSensitivityException)
class Symbol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _config.Symbol_swiginit(self, _config.new_Symbol(*args))

    def set(self, name, ns, values, uri, comment, stage=-1):
        return _config.Symbol_set(self, name, ns, values, uri, comment, stage)

    def __eq__(self, symbol):
        return _config.Symbol___eq__(self, symbol)

    def toString(self):
        return _config.Symbol_toString(self)
    name = property(_config.Symbol_name_get, _config.Symbol_name_set)
    ns = property(_config.Symbol_ns_get, _config.Symbol_ns_set)
    content = property(_config.Symbol_content_get, _config.Symbol_content_set)
    values = property(_config.Symbol_values_get, _config.Symbol_values_set)
    uri = property(_config.Symbol_uri_get, _config.Symbol_uri_set)
    comment = property(_config.Symbol_comment_get, _config.Symbol_comment_set)
    stage = property(_config.Symbol_stage_get, _config.Symbol_stage_set)
    line = property(_config.Symbol_line_get, _config.Symbol_line_set)
    __swig_destroy__ = _config.delete_Symbol

# Register Symbol in _config:
_config.Symbol_swigregister(Symbol)
class SymbolTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _config.SymbolTable_swiginit(self, _config.new_SymbolTable())

    def setLogger(self, arg2):
        return _config.SymbolTable_setLogger(self, arg2)

    def logger(self):
        return _config.SymbolTable_logger(self)

    def add(self, *args):
        return _config.SymbolTable_add(self, *args)

    def get(self, *args):
        return _config.SymbolTable_get(self, *args)

    def remove(self, name):
        return _config.SymbolTable_remove(self, name)

    def incrementObjectCount(self):
        return _config.SymbolTable_incrementObjectCount(self)

    def decrementObjectCount(self):
        return _config.SymbolTable_decrementObjectCount(self)

    def objectCount(self):
        return _config.SymbolTable_objectCount(self)

    def toString(self):
        return _config.SymbolTable_toString(self)

    def hasFileBeenIncluded(self, fileName):
        return _config.SymbolTable_hasFileBeenIncluded(self, fileName)

    def addToIncludedFiles(self, fileName):
        return _config.SymbolTable_addToIncludedFiles(self, fileName)

    def includesBegin(self):
        return _config.SymbolTable_includesBegin(self)

    def includesEnd(self):
        return _config.SymbolTable_includesEnd(self)

    def begin(self):
        return _config.SymbolTable_begin(self)

    def end(self):
        return _config.SymbolTable_end(self)
    __swig_destroy__ = _config.delete_SymbolTable

# Register SymbolTable in _config:
_config.SymbolTable_swigregister(SymbolTable)
class Config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _config.Config_swiginit(self, _config.new_Config())
    __swig_destroy__ = _config.delete_Config

    def readConfig(self, file, stage=-1, raw=False):
        return _config.Config_readConfig(self, file, stage, raw)

    def writeConfig(self, *args):
        return _config.Config_writeConfig(self, *args)

    def setLogger(self, logger):
        return _config.Config_setLogger(self, logger)

    def symbolsToString(self):
        return _config.Config_symbolsToString(self)

    def names(self):
        return _config.Config_names(self)

    def visitedFilesToString(self):
        return _config.Config_visitedFilesToString(self)

    def getInt(self, *args):
        return _config.Config_getInt(self, *args)

    def setInt(self, name, value):
        return _config.Config_setInt(self, name, value)

    def getDouble(self, *args):
        return _config.Config_getDouble(self, *args)

    def setDouble(self, name, value):
        return _config.Config_setDouble(self, name, value)

    def getBool(self, *args):
        return _config.Config_getBool(self, *args)

    def setBool(self, name, value):
        return _config.Config_setBool(self, name, value)

    def getString(self, *args):
        return _config.Config_getString(self, *args)

    def setString(self, name, value):
        return _config.Config_setString(self, name, value)

    def remove(self, name):
        return _config.Config_remove(self, name)

    def getInts(self, *args):
        return _config.Config_getInts(self, *args)

    def setInts(self, name, values):
        return _config.Config_setInts(self, name, values)

    def getDoubles(self, *args):
        return _config.Config_getDoubles(self, *args)

    def setDoubles(self, name, values):
        return _config.Config_setDoubles(self, name, values)

    def getBools(self, *args):
        return _config.Config_getBools(self, *args)

    def setBools(self, name, values):
        return _config.Config_setBools(self, name, values)

    def getStrings(self, *args):
        return _config.Config_getStrings(self, *args)

    def setStrings(self, name, values):
        return _config.Config_setStrings(self, name, values)

    def findSymbols(self, *args):
        return _config.Config_findSymbols(self, *args)

    def symbolTable(self):
        return _config.Config_symbolTable(self)

    def eval(self, rvalue, result, resolveReferences=True, errmsg=None):
        return _config.Config_eval(self, rvalue, result, resolveReferences, errmsg)

    @staticmethod
    def Eval(rvalue, result, resolveReferences=True, symtab=None, errmsg=None):
        return _config.Config_Eval(rvalue, result, resolveReferences, symtab, errmsg)

    @staticmethod
    def writeValues(os, symbol, multilineLists=False):
        return _config.Config_writeValues(os, symbol, multilineLists)

    @staticmethod
    def writeContent(os, symbol, multilineLists=False):
        return _config.Config_writeContent(os, symbol, multilineLists)

    @staticmethod
    def writeSymbol(os, symbol, multilineLists=False):
        return _config.Config_writeSymbol(os, symbol, multilineLists)

    @staticmethod
    def escapeIdentifier(arg1):
        return _config.Config_escapeIdentifier(arg1)

    def trackVariables(self, enabled):
        return _config.Config_trackVariables(self, enabled)

    def getVariables(self):
        return _config.Config_getVariables(self)

    def escape(self, arg2):
        return _config.Config_escape(self, arg2)

# Register Config in _config:
_config.Config_swigregister(Config)
class VectorStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _config.VectorStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _config.VectorStr___nonzero__(self)

    def __bool__(self):
        return _config.VectorStr___bool__(self)

    def __len__(self):
        return _config.VectorStr___len__(self)

    def __getslice__(self, i, j):
        return _config.VectorStr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _config.VectorStr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _config.VectorStr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _config.VectorStr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _config.VectorStr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _config.VectorStr___setitem__(self, *args)

    def pop(self):
        return _config.VectorStr_pop(self)

    def append(self, x):
        return _config.VectorStr_append(self, x)

    def empty(self):
        return _config.VectorStr_empty(self)

    def size(self):
        return _config.VectorStr_size(self)

    def swap(self, v):
        return _config.VectorStr_swap(self, v)

    def begin(self):
        return _config.VectorStr_begin(self)

    def end(self):
        return _config.VectorStr_end(self)

    def rbegin(self):
        return _config.VectorStr_rbegin(self)

    def rend(self):
        return _config.VectorStr_rend(self)

    def clear(self):
        return _config.VectorStr_clear(self)

    def get_allocator(self):
        return _config.VectorStr_get_allocator(self)

    def pop_back(self):
        return _config.VectorStr_pop_back(self)

    def erase(self, *args):
        return _config.VectorStr_erase(self, *args)

    def __init__(self, *args):
        _config.VectorStr_swiginit(self, _config.new_VectorStr(*args))

    def push_back(self, x):
        return _config.VectorStr_push_back(self, x)

    def front(self):
        return _config.VectorStr_front(self)

    def back(self):
        return _config.VectorStr_back(self)

    def assign(self, n, x):
        return _config.VectorStr_assign(self, n, x)

    def resize(self, *args):
        return _config.VectorStr_resize(self, *args)

    def insert(self, *args):
        return _config.VectorStr_insert(self, *args)

    def reserve(self, n):
        return _config.VectorStr_reserve(self, n)

    def capacity(self):
        return _config.VectorStr_capacity(self)
    __swig_destroy__ = _config.delete_VectorStr

# Register VectorStr in _config:
_config.VectorStr_swigregister(VectorStr)
class VectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _config.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _config.VectorInt___nonzero__(self)

    def __bool__(self):
        return _config.VectorInt___bool__(self)

    def __len__(self):
        return _config.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _config.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _config.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _config.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _config.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _config.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _config.VectorInt___setitem__(self, *args)

    def pop(self):
        return _config.VectorInt_pop(self)

    def append(self, x):
        return _config.VectorInt_append(self, x)

    def empty(self):
        return _config.VectorInt_empty(self)

    def size(self):
        return _config.VectorInt_size(self)

    def swap(self, v):
        return _config.VectorInt_swap(self, v)

    def begin(self):
        return _config.VectorInt_begin(self)

    def end(self):
        return _config.VectorInt_end(self)

    def rbegin(self):
        return _config.VectorInt_rbegin(self)

    def rend(self):
        return _config.VectorInt_rend(self)

    def clear(self):
        return _config.VectorInt_clear(self)

    def get_allocator(self):
        return _config.VectorInt_get_allocator(self)

    def pop_back(self):
        return _config.VectorInt_pop_back(self)

    def erase(self, *args):
        return _config.VectorInt_erase(self, *args)

    def __init__(self, *args):
        _config.VectorInt_swiginit(self, _config.new_VectorInt(*args))

    def push_back(self, x):
        return _config.VectorInt_push_back(self, x)

    def front(self):
        return _config.VectorInt_front(self)

    def back(self):
        return _config.VectorInt_back(self)

    def assign(self, n, x):
        return _config.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _config.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _config.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _config.VectorInt_reserve(self, n)

    def capacity(self):
        return _config.VectorInt_capacity(self)
    __swig_destroy__ = _config.delete_VectorInt

# Register VectorInt in _config:
_config.VectorInt_swigregister(VectorInt)
class VectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _config.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _config.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _config.VectorDouble___bool__(self)

    def __len__(self):
        return _config.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _config.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _config.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _config.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _config.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _config.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _config.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _config.VectorDouble_pop(self)

    def append(self, x):
        return _config.VectorDouble_append(self, x)

    def empty(self):
        return _config.VectorDouble_empty(self)

    def size(self):
        return _config.VectorDouble_size(self)

    def swap(self, v):
        return _config.VectorDouble_swap(self, v)

    def begin(self):
        return _config.VectorDouble_begin(self)

    def end(self):
        return _config.VectorDouble_end(self)

    def rbegin(self):
        return _config.VectorDouble_rbegin(self)

    def rend(self):
        return _config.VectorDouble_rend(self)

    def clear(self):
        return _config.VectorDouble_clear(self)

    def get_allocator(self):
        return _config.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _config.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _config.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        _config.VectorDouble_swiginit(self, _config.new_VectorDouble(*args))

    def push_back(self, x):
        return _config.VectorDouble_push_back(self, x)

    def front(self):
        return _config.VectorDouble_front(self)

    def back(self):
        return _config.VectorDouble_back(self)

    def assign(self, n, x):
        return _config.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _config.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _config.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _config.VectorDouble_reserve(self, n)

    def capacity(self):
        return _config.VectorDouble_capacity(self)
    __swig_destroy__ = _config.delete_VectorDouble

# Register VectorDouble in _config:
_config.VectorDouble_swigregister(VectorDouble)
class VectorBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _config.VectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _config.VectorBool___nonzero__(self)

    def __bool__(self):
        return _config.VectorBool___bool__(self)

    def __len__(self):
        return _config.VectorBool___len__(self)

    def __getslice__(self, i, j):
        return _config.VectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _config.VectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _config.VectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _config.VectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _config.VectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _config.VectorBool___setitem__(self, *args)

    def pop(self):
        return _config.VectorBool_pop(self)

    def append(self, x):
        return _config.VectorBool_append(self, x)

    def empty(self):
        return _config.VectorBool_empty(self)

    def size(self):
        return _config.VectorBool_size(self)

    def swap(self, v):
        return _config.VectorBool_swap(self, v)

    def begin(self):
        return _config.VectorBool_begin(self)

    def end(self):
        return _config.VectorBool_end(self)

    def rbegin(self):
        return _config.VectorBool_rbegin(self)

    def rend(self):
        return _config.VectorBool_rend(self)

    def clear(self):
        return _config.VectorBool_clear(self)

    def get_allocator(self):
        return _config.VectorBool_get_allocator(self)

    def pop_back(self):
        return _config.VectorBool_pop_back(self)

    def erase(self, *args):
        return _config.VectorBool_erase(self, *args)

    def __init__(self, *args):
        _config.VectorBool_swiginit(self, _config.new_VectorBool(*args))

    def push_back(self, x):
        return _config.VectorBool_push_back(self, x)

    def front(self):
        return _config.VectorBool_front(self)

    def back(self):
        return _config.VectorBool_back(self)

    def assign(self, n, x):
        return _config.VectorBool_assign(self, n, x)

    def resize(self, *args):
        return _config.VectorBool_resize(self, *args)

    def insert(self, *args):
        return _config.VectorBool_insert(self, *args)

    def reserve(self, n):
        return _config.VectorBool_reserve(self, n)

    def capacity(self):
        return _config.VectorBool_capacity(self)
    __swig_destroy__ = _config.delete_VectorBool

# Register VectorBool in _config:
_config.VectorBool_swigregister(VectorBool)

